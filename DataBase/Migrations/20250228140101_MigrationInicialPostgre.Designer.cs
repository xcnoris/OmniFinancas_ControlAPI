// <auto-generated />
using System;
using DataBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(CDIOmniServiceDBContext))]
    [Migration("20250228140101_MigrationInicialPostgre")]
    partial class MigrationInicialPostgre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Modelos.EF.ClientesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntidadeId")
                        .HasColumnType("integer");

                    b.Property<int>("RevendaId")
                        .HasColumnType("integer");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.HasIndex("RevendaId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Modelos.EF.Entidade.EntidadeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Endereco")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TipoEntidade")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("Modelos.EF.Entidade.IdentificadorEntidadeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CNPJ_CPF")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntidadeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.ToTable("Identificadores_Entidade");
                });

            modelBuilder.Entity("Modelos.EF.Lincenca.LicencaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChaveAtivacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExpiracao")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlanoLicencaId")
                        .HasColumnType("integer");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PlanoLicencaId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Licencas");
                });

            modelBuilder.Entity("Modelos.EF.Lincenca.PlanosLicencaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DuracaoMeses")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("QuantidadeUsuarios")
                        .HasColumnType("integer");

                    b.Property<int?>("RevendaModelId")
                        .HasColumnType("integer");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RevendaModelId");

                    b.ToTable("Planos_Licenca");
                });

            modelBuilder.Entity("Modelos.EF.Lincenca.PlanosModulosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModuloId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanoLicencaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModuloId");

                    b.HasIndex("PlanoLicencaId");

                    b.ToTable("Planos_Modulos");
                });

            modelBuilder.Entity("Modelos.EF.ModulosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Modulos_Software");
                });

            modelBuilder.Entity("Modelos.EF.Revenda.RevendaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntidadeId")
                        .HasColumnType("integer");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.ToTable("Revendas");
                });

            modelBuilder.Entity("Modelos.EF.Revenda.UsuariosRevendaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntidadeId")
                        .HasColumnType("integer");

                    b.Property<int>("RevendaId")
                        .HasColumnType("integer");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.HasIndex("RevendaId");

                    b.ToTable("Usuarios_Revendas");
                });

            modelBuilder.Entity("Modelos.EF.SoftwaresModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descrição")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProprietarioId")
                        .HasColumnType("integer");

                    b.Property<int>("Situacao")
                        .HasColumnType("integer");

                    b.Property<string>("Versao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProprietarioId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("Modelos.EF.ClientesModel", b =>
                {
                    b.HasOne("Modelos.EF.Entidade.EntidadeModel", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Modelos.EF.Revenda.RevendaModel", "Revenda")
                        .WithMany("ClientesList")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entidade");

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("Modelos.EF.Entidade.IdentificadorEntidadeModel", b =>
                {
                    b.HasOne("Modelos.EF.Entidade.EntidadeModel", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entidade");
                });

            modelBuilder.Entity("Modelos.EF.Lincenca.LicencaModel", b =>
                {
                    b.HasOne("Modelos.EF.ClientesModel", "Cliente")
                        .WithMany("Licencas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelos.EF.Lincenca.PlanosLicencaModel", "PlanoLicenca")
                        .WithMany()
                        .HasForeignKey("PlanoLicencaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelos.EF.SoftwaresModel", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("PlanoLicenca");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Modelos.EF.Lincenca.PlanosLicencaModel", b =>
                {
                    b.HasOne("Modelos.EF.Revenda.RevendaModel", null)
                        .WithMany("PlanosLicencaList")
                        .HasForeignKey("RevendaModelId");
                });

            modelBuilder.Entity("Modelos.EF.Lincenca.PlanosModulosModel", b =>
                {
                    b.HasOne("Modelos.EF.ModulosModel", "Modulo")
                        .WithMany()
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelos.EF.Lincenca.PlanosLicencaModel", "PlanoLicenca")
                        .WithMany("ModulosPermitidos")
                        .HasForeignKey("PlanoLicencaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");

                    b.Navigation("PlanoLicenca");
                });

            modelBuilder.Entity("Modelos.EF.ModulosModel", b =>
                {
                    b.HasOne("Modelos.EF.SoftwaresModel", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Modelos.EF.Revenda.RevendaModel", b =>
                {
                    b.HasOne("Modelos.EF.Entidade.EntidadeModel", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entidade");
                });

            modelBuilder.Entity("Modelos.EF.Revenda.UsuariosRevendaModel", b =>
                {
                    b.HasOne("Modelos.EF.Entidade.EntidadeModel", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Modelos.EF.Revenda.RevendaModel", "Revenda")
                        .WithMany("UsuarioRevendaList")
                        .HasForeignKey("RevendaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entidade");

                    b.Navigation("Revenda");
                });

            modelBuilder.Entity("Modelos.EF.SoftwaresModel", b =>
                {
                    b.HasOne("Modelos.EF.Revenda.RevendaModel", "Proprietario")
                        .WithMany("SoftwaresList")
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proprietario");
                });

            modelBuilder.Entity("Modelos.EF.ClientesModel", b =>
                {
                    b.Navigation("Licencas");
                });

            modelBuilder.Entity("Modelos.EF.Lincenca.PlanosLicencaModel", b =>
                {
                    b.Navigation("ModulosPermitidos");
                });

            modelBuilder.Entity("Modelos.EF.Revenda.RevendaModel", b =>
                {
                    b.Navigation("ClientesList");

                    b.Navigation("PlanosLicencaList");

                    b.Navigation("SoftwaresList");

                    b.Navigation("UsuarioRevendaList");
                });
#pragma warning restore 612, 618
        }
    }
}
